# We omit main as this is the sources for the static library
src_mixxx = files([
    './errordialoghandler.cpp',
    './mixxx.cpp',
    './mixxxapplication.cpp'
])
# Subdirs will fill up this with UI files
src_ui_files = []

# TODO: Handle autogenerated files (engine/channelmixer_autogen.cpp and util/sample_autogen.h)

# Set up protobuf files here to preserve subdirectories
proto_exe = find_program('protoc')
protogen = generator(proto_exe,
    output: ['@BASENAME@.pb.cc', '@BASENAME@.pb.h'],
    arguments: ['--proto_path=@CURRENT_SOURCE_DIR@', '--cpp_out=@BUILD_DIR@', '@INPUT@']
)

src_proto = files([
    'proto/beats.proto',
    'proto/headers.proto',
    'proto/keys.proto',
    'proto/skin.proto',
    'proto/waveform.proto'
])

gen_proto = protogen.process(src_proto, preserve_path_from: meson.current_source_dir())


# Subdirectories
subdir('controllers')
subdir('library')
subdir('encoder')
subdir('broadcast')
subdir('analyzer')
subdir('mixer')
subdir('vinylcontrol')
subdir('musicbrainz')
subdir('track')
subdir('control')
subdir('recording')
subdir('effects')
subdir('sources')
subdir('soundio')
subdir('dialog')
subdir('test')
subdir('util')
subdir('waveform')
subdir('skin')
subdir('preferences')
subdir('engine')
subdir('database')
subdir('widget')

# Override MIXXX VERSION define with meson project version
extra_cc_flags = [
    '-DMIXXX_VERSION=@0@'.format(meson.project_version())
]

ui_processed = qt5_mod.preprocess(ui_files: src_ui_files)

libmixxx_static = static_library('libmixxx', src_mixxx, ui_processed, gen_proto,
  dependencies: common_deps,
  include_directories: inc_project,
  cpp_args: extra_cc_flags
)
